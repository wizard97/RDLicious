grammar;

use crate::ast::*;

// Lexer: a pragmatic subset of SystemRDL tokens needed for the implemented grammar.
match {
    // Keywords and multi-char ops first so they are not lexed as generic ID
    "addrmap","regfile","reg","field","mem","signal","enum","struct","abstract","default","external","internal","true","false","property","type","component","constraint","all","alias","bit","longint","boolean","number",
    // Literal keywords (lowercase subset)
    "na","rw","wr","r","w","rw1","w1",
    "rclr","rset","ruser",
    "woset","woclr","wot","wzs","wzc","wzt","wclr","wset","wuser",
    "compact","regalign","fullalign","hw","sw",
    // property keywords
    "name","desc","reset","componentwidth",
    "**","<<",">>","==","!=","<=",">=","&&","||","~&","~|",
    "=","+=","%=","[","]","@","->","::","{","}",";",",",".","#",
    // Verilog-style number (width'basevalue). Place before standalone ' token.
    r"[0-9]+('[bBoOdDhH][0-9a-fA-F_xXzZ]+)" => VLOG_INT,
    "'",
    "(",")","?",":","+","-","*","/","%","&","|","^","~^","^~","!","~","<",">",
    r"[0-9]+" => INT,
    r"0x[0-9a-fA-F]+" => HEX_LOW,
    r"0X[0-9a-fA-F]+" => HEX_UPPER,
    r#"\"([^"\\]|\\.)*\""# => STRING,
    r"[a-zA-Z_][a-zA-Z0-9_]*" => ID,
    r"[ \t\r\n]+" => { },
    r"//[^\n\r]*" => { },
    r"/\*([^*]*\*+[^*/])*([^*]*\*+|[^*])*\*/" => { },
    _
}

Ident: String = {
    <s:ID> => s.to_string(),
};
Number: Expr = {
    <s:INT> => Expr::Literal(Literal::Dec(s.to_string())),
    <s:HEX_LOW> => Expr::Literal(Literal::Hex(s.to_string())),
    <s:HEX_UPPER> => Expr::Literal(Literal::Hex(s.to_string())),
    <s:VLOG_INT> => Expr::Literal(Literal::Verilog { raw: s.to_string() }),
};
String: String = {
    <s:STRING> => s.to_string(),
};

// Single-rule precedence-based expression grammar using attributes
pub Expr: Expr = {
    // Highest precedence: primary
    #[precedence(level="0")] Primary,
    // Unary prefix (right associative chaining)
    #[precedence(level="0")]
    "+" <e:Expr> => Expr::Unary { op: UnaryOp::Plus, rhs: Box::new(e) },
    #[precedence(level="0")]
    "-" <e:Expr> => Expr::Unary { op: UnaryOp::Minus, rhs: Box::new(e) },
    #[precedence(level="0")]
    "!" <e:Expr> => Expr::Unary { op: UnaryOp::Not, rhs: Box::new(e) },
    #[precedence(level="0")]
    "~" <e:Expr> => Expr::Unary { op: UnaryOp::BitNot, rhs: Box::new(e) },
    #[precedence(level="0")]
    "~&" <e:Expr> => Expr::Reduct { op: ReductOp::And, rhs: Box::new(e) },
    #[precedence(level="0")]
    "~|" <e:Expr> => Expr::Reduct { op: ReductOp::Or, rhs: Box::new(e) },
    #[precedence(level="0")]
    "~^" <e:Expr> => Expr::Reduct { op: ReductOp::Xor, rhs: Box::new(e) },
    #[precedence(level="0")]
    "^~" <e:Expr> => Expr::Reduct { op: ReductOp::Xor, rhs: Box::new(e) },
    // Exponentiation (right associative)
    #[precedence(level="1")] #[assoc(side="right")]
    <l:Expr> "**" <r:Expr> => Expr::Binary { op: BinaryOp::Pow, lhs: Box::new(l), rhs: Box::new(r) },
    // Multiplicative
    #[precedence(level="2")] #[assoc(side="left")]
    <l:Expr> "*" <r:Expr> => Expr::Binary { op: BinaryOp::Mul, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="2")] #[assoc(side="left")]
    <l:Expr> "/" <r:Expr> => Expr::Binary { op: BinaryOp::Div, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="2")] #[assoc(side="left")]
    <l:Expr> "%" <r:Expr> => Expr::Binary { op: BinaryOp::Mod, lhs: Box::new(l), rhs: Box::new(r) },
    // Additive
    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expr> "+" <r:Expr> => Expr::Binary { op: BinaryOp::Add, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expr> "-" <r:Expr> => Expr::Binary { op: BinaryOp::Sub, lhs: Box::new(l), rhs: Box::new(r) },
    // Shifts
    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expr> "<<" <r:Expr> => Expr::Binary { op: BinaryOp::Shl, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expr> ">>" <r:Expr> => Expr::Binary { op: BinaryOp::Shr, lhs: Box::new(l), rhs: Box::new(r) },
    // Relational
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expr> "<" <r:Expr> => Expr::Binary { op: BinaryOp::Lt, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expr> "<=" <r:Expr> => Expr::Binary { op: BinaryOp::Le, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expr> ">" <r:Expr> => Expr::Binary { op: BinaryOp::Gt, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expr> ">=" <r:Expr> => Expr::Binary { op: BinaryOp::Ge, lhs: Box::new(l), rhs: Box::new(r) },
    // Equality
    #[precedence(level="6")] #[assoc(side="left")]
    <l:Expr> "==" <r:Expr> => Expr::Binary { op: BinaryOp::Eq, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="6")] #[assoc(side="left")]
    <l:Expr> "!=" <r:Expr> => Expr::Binary { op: BinaryOp::Ne, lhs: Box::new(l), rhs: Box::new(r) },
    // Bitwise AND
    #[precedence(level="7")] #[assoc(side="left")]
    <l:Expr> "&" <r:Expr> => Expr::Binary { op: BinaryOp::BitAnd, lhs: Box::new(l), rhs: Box::new(r) },
    // Bitwise XOR variants
    #[precedence(level="8")] #[assoc(side="left")]
    <l:Expr> "^" <r:Expr> => Expr::Binary { op: BinaryOp::BitXor, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="8")] #[assoc(side="left")]
    <l:Expr> "~^" <r:Expr> => Expr::Binary { op: BinaryOp::BitXnor, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="8")] #[assoc(side="left")]
    <l:Expr> "^~" <r:Expr> => Expr::Binary { op: BinaryOp::BitXnor, lhs: Box::new(l), rhs: Box::new(r) },
    // Bitwise OR
    #[precedence(level="9")] #[assoc(side="left")]
    <l:Expr> "|" <r:Expr> => Expr::Binary { op: BinaryOp::BitOr, lhs: Box::new(l), rhs: Box::new(r) },
    // Logical AND
    #[precedence(level="10")] #[assoc(side="left")]
    <l:Expr> "&&" <r:Expr> => Expr::Binary { op: BinaryOp::LogAnd, lhs: Box::new(l), rhs: Box::new(r) },
    // Logical OR
    #[precedence(level="11")] #[assoc(side="left")]
    <l:Expr> "||" <r:Expr> => Expr::Binary { op: BinaryOp::LogOr, lhs: Box::new(l), rhs: Box::new(r) },
    // Ternary conditional (lowest precedence, right associative)
    #[precedence(level="12")] #[assoc(side="right")]
    <c:Expr> "?" <t:Expr> ":" <e:Expr> => Expr::Ternary { cond: Box::new(c), then_br: Box::new(t), else_br: Box::new(e) },
};

Primary: Expr = {
    PropRefExpr,
    CastExpr,
    ReplicateExpr,
    ConcatExpr,
    EnumLit,
    StructLit,
    ArrayLit,
    BoolLit,
    SpecialLit,
    Number,
    String => Expr::Literal(Literal::Str(<>)),
    Ident  => Expr::Ident(<>),
    "(" <e:Expr> ")" => e,
};

CastExpr: Expr = {
    "boolean" "'" "(" <e:Expr> ")" => Expr::CastType { ty: CastPrimType::Boolean, expr: Box::new(e) },
    "bit" "'" "(" <e:Expr> ")" => Expr::CastType { ty: CastPrimType::Bit, expr: Box::new(e) },
    "longint" "'" "(" <e:Expr> ")" => Expr::CastType { ty: CastPrimType::LongInt, expr: Box::new(e) },
    <w:CastWidthExpr> "'" "(" <e:Expr> ")" => Expr::CastWidth { width: Box::new(w), expr: Box::new(e) },
};
CastWidthExpr: Expr = {
    Number,
    "(" <e:Expr> ")" => e,
};

EnumLit: Expr = {
    <s:Ident> "::" <n:Ident> => Expr::EnumLiteral { scope: s, name: n },
};
BoolLit: Expr = { "true" => Expr::Literal(Literal::Bool(true)), "false" => Expr::Literal(Literal::Bool(false)) };
SpecialLit: Expr = {
    "na" => Expr::Literal(Literal::AccessType("na".into())),
    "rw" => Expr::Literal(Literal::AccessType("rw".into())),
    "wr" => Expr::Literal(Literal::AccessType("wr".into())),
    "r" => Expr::Literal(Literal::AccessType("r".into())),
    "w" => Expr::Literal(Literal::AccessType("w".into())),
    "rw1" => Expr::Literal(Literal::AccessType("rw1".into())),
    "w1" => Expr::Literal(Literal::AccessType("w1".into())),
    "rclr" => Expr::Literal(Literal::OnReadType("rclr".into())),
    "rset" => Expr::Literal(Literal::OnReadType("rset".into())),
    "ruser" => Expr::Literal(Literal::OnReadType("ruser".into())),
    "woset" => Expr::Literal(Literal::OnWriteType("woset".into())),
    "woclr" => Expr::Literal(Literal::OnWriteType("woclr".into())),
    "wot" => Expr::Literal(Literal::OnWriteType("wot".into())),
    "wzs" => Expr::Literal(Literal::OnWriteType("wzs".into())),
    "wzc" => Expr::Literal(Literal::OnWriteType("wzc".into())),
    "wzt" => Expr::Literal(Literal::OnWriteType("wzt".into())),
    "wclr" => Expr::Literal(Literal::OnWriteType("wclr".into())),
    "wset" => Expr::Literal(Literal::OnWriteType("wset".into())),
    "wuser" => Expr::Literal(Literal::OnWriteType("wuser".into())),
    "compact" => Expr::Literal(Literal::AddressingType("compact".into())),
    "regalign" => Expr::Literal(Literal::AddressingType("regalign".into())),
    "fullalign" => Expr::Literal(Literal::AddressingType("fullalign".into())),
    "hw" => Expr::Literal(Literal::PrecedenceType("hw".into())),
    "sw" => Expr::Literal(Literal::PrecedenceType("sw".into())),
};
PropRefExpr: Expr = {
    <t:InstanceRef> "->" <p:Ident> => Expr::PropRef { target: t, prop: p },
    <t:InstanceRef> "->" "reset" => Expr::PropRef { target: t, prop: "reset".into() },
    <t:InstanceRef> "->" "name" => Expr::PropRef { target: t, prop: "name".into() },
    <t:InstanceRef> "->" "desc" => Expr::PropRef { target: t, prop: "desc".into() },
};
ArrayLit: Expr = {
    "'" "{" <elems:ArrayElems?> "}" => Expr::ArrayLiteral(elems.unwrap_or_default()),
};
ArrayElems: Vec<Expr> = {
    <h:Expr> "," <t:ArrayElems> => { let mut v=vec![h]; v.extend(t); v },
    <e:Expr> => vec![e],
};
StructLit: Expr = {
    <n:Ident> "'" "{" <kvs:StructKVs?> "}" => Expr::StructLiteral { name: n, kv: kvs.unwrap_or_default() },
};
StructKVs: Vec<(String, Expr)> = {
    <h:StructKV> "," <t:StructKVs> => { let mut v=vec![h]; v.extend(t); v },
    <one:StructKV> => vec![one],
};
StructKV: (String, Expr) = {
    <k:Ident> ":" <v:Expr> => (k, v),
};

// ---------------- Root and top-level items ---------------------------------
pub Root: Root = { <v:RootSeq> => Root(v), => Root(vec![]) };

RootSeq: Vec<RootItem> = {
    <h:RootGroup> <t:RootSeq> => { let mut v=h; v.extend(t); v },
    <g:RootGroup> => g,
};

RootGroup: Vec<RootItem> = {
    // component_named_def component_insts
    <def:ComponentNamedDef> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: None, alias: None, comp: ComponentRef::Named(def.name.clone()), param_inst: p, instances: list };
        vec![RootItem::Component(def), RootItem::ExplicitInst(inst)]
    },
    // component_named_def component_inst_type component_insts
    <def:ComponentNamedDef> "external" <a:InstAliasOpt> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("external".into()), alias: a, comp: ComponentRef::Named(def.name.clone()), param_inst: p, instances: list };
        vec![RootItem::Component(def), RootItem::ExplicitInst(inst)]
    },
    <def:ComponentNamedDef> "internal" <a:InstAliasOpt> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("internal".into()), alias: a, comp: ComponentRef::Named(def.name.clone()), param_inst: p, instances: list };
        vec![RootItem::Component(def), RootItem::ExplicitInst(inst)]
    },
    // Anonymous component def followed by insts: component_anon_def component_insts
    <t:ComponentTypePrimary> <_b:ComponentBody> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: None, alias: None, comp: ComponentRef::Anonymous(t.clone()), param_inst: p, instances: list };
        vec![RootItem::ExplicitInst(inst)]
    },
    // external/internal prefix before anonymous component def
    "external" <t:ComponentTypePrimary> <_b:ComponentBody> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("external".into()), alias: None, comp: ComponentRef::Anonymous(t.clone()), param_inst: p, instances: list };
        vec![RootItem::ExplicitInst(inst)]
    },
    "internal" <t:ComponentTypePrimary> <_b:ComponentBody> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("internal".into()), alias: None, comp: ComponentRef::Anonymous(t.clone()), param_inst: p, instances: list };
        vec![RootItem::ExplicitInst(inst)]
    },
    // component_anon_def component_inst_type component_insts
    <t:ComponentTypePrimary> <_b:ComponentBody> "external" <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("external".into()), alias: None, comp: ComponentRef::Anonymous(t.clone()), param_inst: p, instances: list };
        vec![RootItem::ExplicitInst(inst)]
    },
    <t:ComponentTypePrimary> <_b:ComponentBody> "internal" <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("internal".into()), alias: None, comp: ComponentRef::Anonymous(t.clone()), param_inst: p, instances: list };
        vec![RootItem::ExplicitInst(inst)]
    },
    // component_inst_type component_named_def component_insts
    "external" <def:ComponentNamedDef> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("external".into()), alias: None, comp: ComponentRef::Named(def.name.clone()), param_inst: p, instances: list };
        vec![RootItem::Component(def), RootItem::ExplicitInst(inst)]
    },
    "internal" <def:ComponentNamedDef> <p:ParamInstOpt> <list:CompDefInstList> ";" => {
        let inst = ExplicitComponentInst { inst_type: Some("internal".into()), alias: None, comp: ComponentRef::Named(def.name.clone()), param_inst: p, instances: list };
        vec![RootItem::Component(def), RootItem::ExplicitInst(inst)]
    },
    // Single standalone root item followed by semicolon
    <item:StandardRootItem> ";" => vec![item],
};

StandardRootItem: RootItem = {
    UntypedExplicitInst => RootItem::ExplicitInst(<>),
    ComponentNamedDef => RootItem::Component(<>),
    EnumDef => RootItem::Enum(<>),
    StructDef => RootItem::Struct(<>),
    DynPropAssign => RootItem::DynPropAssign(<>),
    LocalPropAssign => RootItem::LocalPropAssign(<>),
    UDPDef => RootItem::Udp(<>),
    ExplicitComponentInst => RootItem::ExplicitInst(<>),
};

// Removed intermediate helpers after refactor
// We'll adjust in RootGroup by replacing base when base == "__DEF__".

// ---------------------------------------------------------------------------
// Explicit component instantiation (subset of full grammar, iterative build)
// Grammar reference (simplified):
//   explicit_component_inst ::= [ component_inst_type ] [ component_inst_alias ]
//                               ID component_insts
//   component_insts ::= [ param_inst ] component_inst { , component_inst }
//   component_inst ::= ID [ ( array+ | range ) ]
//                       [ = expr ] [ @ expr ] [ += expr ] [ %= expr ]
// We capture structural presence as booleans in SingleInst.

// Explicit component instantiation: external/internal forms
pub ExplicitComponentInst: ExplicitComponentInst = {
    "external" <a:InstAliasOpt> <base:Ident> <p:ParamInstOpt> <l:ExplicitInstList> => {
        ExplicitComponentInst { inst_type: Some("external".into()), alias: a, comp: ComponentRef::Named(base), param_inst: p, instances: l }
    },
    "internal" <a:InstAliasOpt> <base:Ident> <p:ParamInstOpt> <l:ExplicitInstList> => {
        ExplicitComponentInst { inst_type: Some("internal".into()), alias: a, comp: ComponentRef::Named(base), param_inst: p, instances: l }
    },
};
InstAliasOpt: Option<String> = { "alias" <id:Ident> => Some(id), => None };
ParamInstOpt: Vec<ParamAssign> = { <v:ParamInst> => v, => vec![] };
ExplicitInstList: Vec<SingleInst> = {
    <h:ExplicitInstOne> "," <t:ExplicitInstList> => { let mut v=vec![h]; v.extend(t); v },
    <one:ExplicitInstOne> => vec![one],
};
CompDefInstList: Vec<SingleInst> = ExplicitInstList;
ExplicitInstOne: SingleInst = {
    <n:Ident> <ar:InstArrayOrRange?> <mods:InstModSeq> => {
        let (range_opt, arrays)= ar.unwrap_or((None,vec![]));
        let (init, addr, stride, align) = mods;
        SingleInst { name:n, range:range_opt, array_dims:arrays, init_expr:init, addr_expr:addr, stride_expr:stride, align_expr:align }
    },
};
// Untyped explicit instantiation (no external/internal)
UntypedExplicitInst: ExplicitComponentInst = {
    <base:Ident> <p:ParamInstOpt> <l:ExplicitInstList> => {
        ExplicitComponentInst { inst_type: None, alias: None, comp: ComponentRef::Named(base), param_inst: p, instances: l }
    },
    "alias" <a:Ident> <base:Ident> <p:ParamInstOpt> <l:ExplicitInstList> => {
        ExplicitComponentInst { inst_type: None, alias: Some(a), comp: ComponentRef::Named(base), param_inst: p, instances: l }
    },
};
// Ordered instantiation modifiers parsed via recursive descent style to avoid
// ambiguity for optional sequences. Order: = @ += %= (each at most once)
InstModSeq: (Option<Expr>,Option<Expr>,Option<Expr>,Option<Expr>) = {
    // empty
    => (None,None,None,None),
    // starts with init
    "=" <i:Expr> <rest:AfterInit> => { let (a,s,al)=rest; (Some(i), a,s,al) },
    // starts with address (no init)
    "@" <a:Expr> <rest:AfterAddr> => { let (s,al)=rest; (None, Some(a), s, al) },
    // starts with stride (no init/address)
    "+=" <s:Expr> <rest:AfterStride> => { let al=rest; (None,None,Some(s), al) },
    // starts with align only
    "%=" <al:Expr> => (None,None,None,Some(al)),
};
AfterInit: (Option<Expr>,Option<Expr>,Option<Expr>) = {
    "@" <a:Expr> <rest:AfterAddr> => { let (s,al)=rest; (Some(a), s, al) },
    "+=" <s:Expr> <rest:AfterStride> => (None, Some(s), rest),
    "%=" <al:Expr> => (None,None,Some(al)),
    => (None,None,None),
};
AfterAddr: (Option<Expr>,Option<Expr>) = {
    "+=" <s:Expr> <rest:AfterStride> => (Some(s), rest),
    "%=" <al:Expr> => (None, Some(al)),
    => (None,None),
};
AfterStride: Option<Expr> = {
    "%=" <al:Expr> => Some(al),
    => None,
};
InstArrayOrRange: (Option<(Expr,Expr)>, Vec<Expr>) = {
    <r:RangeSuffix> => (Some(r), vec![]),
    <v:ArraySuffixes1Plus> => (None, v),
};
ArraySuffixes1Plus: Vec<Expr> = { <a:ArraySuffix> <rest:ArraySuffixes1Plus> => { let mut v=vec![a]; v.extend(rest); v }, <a:ArraySuffix> => vec![a] };

// (List / array / range handling to be added in later iterations.)

// Allow explicit component inst inside component bodies (discard AST):
ExplicitCompInstBody: () = { <_e:ExplicitComponentInst> => () };

ComponentTypePrimary: ComponentTypePrimary = {
    "addrmap" => ComponentTypePrimary::Addrmap,
    "regfile" => ComponentTypePrimary::Regfile,
    "reg" => ComponentTypePrimary::Reg,
    "field" => ComponentTypePrimary::Field,
    "mem" => ComponentTypePrimary::Mem,
    "signal" => ComponentTypePrimary::Signal,
};

ComponentBody: () = {
    "{" (ComponentBodyItem ";")* "}" => (),
};
ComponentBodyItem: () = {
    AnonComponentWithInst => (),
    ComponentNamedDef => (),
    SimpleInst => (),
    LocalPropAssign => (),
    DynPropAssign => (),
    ParamInst => (),
    ExplicitCompInstBody => (),
};
AnonComponentWithInst: () = {
    ComponentTypePrimary ComponentBody Ident InstSuffixes? InstAddr => (),
};
// Simple component instantiation inside component bodies (subset)
SimpleInst: () = {
    Ident Ident SimpleInstPost => (),
    Ident ParamInst Ident SimpleInstPost => (),
};
// external/internal handled only by ExplicitComponentInst to avoid ambiguity
InstSuffixes: () = {
    InstSuffix InstSuffixes => (),
    InstSuffix => (),
};
InstSuffix: () = {
    RangeSuffix => (),
    ArraySuffix => (),
};
RangeSuffix: (Expr,Expr) = { "[" <a:Expr> ":" <b:Expr> "]" => (a,b) };
ArraySuffix: Expr = { "[" <e:Expr> "]" => e };
SimpleInstPost: () = {
    RangeSuffix SimpleInstPost => (),
    ArraySuffix SimpleInstPost => (),
    "@" Expr => (),
    => (),
};
InstAddr: () = { ("@" Expr)? => () }; // retained for AnonComponentWithInst
// removed simple PropertyAssign to avoid ambiguity; LocalPropAssign handles '=' case

LocalPropAssign: LocalPropAssign = {
    "default" <p:Ident> "=" <e:Expr> => LocalPropAssign { is_default: true, prop: p, value: Some(e) },
    <p:Ident> "=" <e:Expr> => LocalPropAssign { is_default: false, prop: p, value: Some(e) },
    // Allow property names that are special literal keywords
    "sw" "=" <e:Expr> => LocalPropAssign { is_default: false, prop: "sw".into(), value: Some(e) },
    "hw" "=" <e:Expr> => LocalPropAssign { is_default: false, prop: "hw".into(), value: Some(e) },
    "name" "=" <e:Expr> => LocalPropAssign { is_default: false, prop: "name".into(), value: Some(e) },
    "desc" "=" <e:Expr> => LocalPropAssign { is_default: false, prop: "desc".into(), value: Some(e) },
    "reset" "=" <e:Expr> => LocalPropAssign { is_default: false, prop: "reset".into(), value: Some(e) },
};
DynPropAssign: DynPropAssign = {
    <t:InstanceRef> "->" <p:Ident> "=" <e:Expr> => DynPropAssign { target: t, prop: p, value: Some(e) },
    <t:InstanceRef> "->" "reset" "=" <e:Expr> => DynPropAssign { target: t, prop: "reset".into(), value: Some(e) },
    <t:InstanceRef> "->" "name" "=" <e:Expr> => DynPropAssign { target: t, prop: "name".into(), value: Some(e) },
    <t:InstanceRef> "->" "desc" "=" <e:Expr> => DynPropAssign { target: t, prop: "desc".into(), value: Some(e) },
};
InstanceRef: Vec<InstanceRefElem> = {
    <h:InstanceRefElem> <ts:InstanceRefTail*> => { let mut v=vec![h]; v.extend(ts); v },
};
InstanceRefTail: InstanceRefElem = {
    "." <e:InstanceRefElem> => e,
};
InstanceRefElem: InstanceRefElem = {
    <id:Ident> <s:InstRefArraySuffix*> => InstanceRefElem { ident: id, array_suffixes: s },
};
InstRefArraySuffix: Option<Expr> = {
    "[" <e:Expr> "]" => Some(e),
};

pub ComponentNamedDef: ComponentDef = { <t:ComponentTypePrimary> <n:Ident> <params:ParamDefOpt> <_b:ComponentBody> => ComponentDef { ctype: t, name: n, params }, };

// ---------------- Struct definitions (subset) -----------------------------
pub StructDef: StructDef = {
    <h:StructHeader> "{" <elems:StructElems?> "}" => StructDef { name: h.0, base: h.1, elems: elems.unwrap_or_default() },
};
StructHeader: (String, Option<String>) = {
    "struct" <n:Ident> ":" <b:Ident> => (n, Some(b)),
    "struct" <n:Ident> => (n, None),
    "abstract" "struct" <n:Ident> ":" <b:Ident> => (n, Some(b)),
    "abstract" "struct" <n:Ident> => (n, None),
};
StructElems: Vec<StructElem> = {
    <h:StructElem> <t:StructElems> => { let mut v=vec![h]; v.extend(t); v },
    <e:StructElem> => vec![e],
};
TypeIdent: String = { <s:Ident> => s, "number" => "number".into(), "ref" => "ref".into(), "bit" => "bit".into(), "longint" => "longint".into(), "boolean" => "boolean".into(), "string" => "string".into() };
StructElem: StructElem = {
    <ty:TypeIdent> <name:Ident> <arr:StructElemArray?> ";" => StructElem { ty, name, is_array: arr.is_some() },
};
StructElemArray: () = { "[" "]" => () };

// ---------------- User-defined properties (subset) -------------------------
UDPDef: UDPDef = {
    "property" <n:Ident> "{" <attrs:UDPAttrList> "}" => UDPDef { name: n, attrs },
};
UDPAttrList: Vec<UDPAttr> = {
    <h:UDPAttr> ";" <t:UDPAttrList> => { let mut v=vec![h]; v.extend(t); v },
    <a:UDPAttr> ";" => vec![a],
};
UDPAttr: UDPAttr = {
    "type" "=" <dt:PropertyDataType> <arr:UDPArray?> => UDPAttr::Type { data_type: dt, is_array: arr.is_some() },
    "default" "=" <e:ConstExpr> => UDPAttr::Default(e),
    "component" "=" <ts:PropertyCompTypes> => UDPAttr::Usage(ts),
    // Per spec only 'componentwidth' is allowed as constraint value
    "constraint" "=" "componentwidth" => UDPAttr::Constraint("componentwidth".into()),
};
UDPArray: () = {
    "[" "]" => (),
};
PropertyCompTypes: Vec<String> = {
    <h:PropertyCompType> "|" <t:PropertyCompTypes> => { let mut v=vec![h]; v.extend(t); v },
    <one:PropertyCompType> => vec![one],
};
PropertyCompType: String = {
    "reg" => "reg".into(),
    "addrmap" => "addrmap".into(),
    "regfile" => "regfile".into(),
    "field" => "field".into(),
    "mem" => "mem".into(),
    "signal" => "signal".into(),
    "all" => "all".into(),
    "constraint" => "constraint".into(),
    <s:Ident> => s,
};

// ---------------- Parameters (subset) --------------------------------------
ParamDefOpt: Vec<ParamDecl> = {
    <p:ParamDef> => p,
    => vec![],
};
ParamDef: Vec<ParamDecl> = {
    "#" "(" <es:ParamDefElems> ")" => es,
};
ParamDefElems: Vec<ParamDecl> = {
    <v:ParamDefElemList> => v,
};
ParamDefElemList: Vec<ParamDecl> = {
    <h:ParamDefElem> <t:ParamDefElemListTail?> => { let mut v=vec![h]; if let Some(mut r)=t { v.append(&mut r);} v },
};
ParamDefElemListTail: Vec<ParamDecl> = {
    "," <n:ParamDefElem> <rest:ParamDefElemListTail?> => { let mut v=vec![n]; if let Some(mut r)=rest { v.append(&mut r);} v },
};
ParamDefElem: ParamDecl = { <dt:DataType> <name:Ident> ParamArrayType? <def:ParamDefault?> => {
        if let Some(ref e) = def { if expr_contains_propref(e) { panic!("property reference not allowed in parameter default"); } }
        ParamDecl { data_type: dt, name, default: def }
    }, };
ParamArrayType: () = {
    "[" "]" => (),
};
ParamDefault: Expr = { "=" <e:Expr> => { if expr_contains_propref(&e) { panic!("property reference not allowed in parameter default"); } e } };

ParamInst: Vec<ParamAssign> = { "#" "(" <v:ParamAssignList?> ")" => v.unwrap_or_default() };
ParamAssignList: Vec<ParamAssign> = { <h:ParamAssignment> "," <t:ParamAssignList> => { let mut v=vec![h]; v.extend(t); v }, <one:ParamAssignment> => vec![one] };
ParamAssignment: ParamAssign = { "." <id:Ident> "(" <e:Expr> ")" => { if expr_contains_propref(&e) { panic!("property reference not allowed in parameter assignment"); } ParamAssign { name:id, value:e } } };

EnumEntries: Vec<EnumEntry> = {
    <h:EnumEntry> <t:EnumEntries> => { let mut v=vec![h]; v.extend(t); v },
    <l:EnumEntry> => vec![l],
};
EnumEntry: EnumEntry = {
    <n:Ident> "=" <e:Expr> ";" => EnumEntry { name: n, value: Some(e) },
    <n:Ident> ";" => EnumEntry { name: n, value: None },
};
pub EnumDef: EnumDef = {
    "enum" <n:Ident> "{" <ents:EnumEntries> "}" => EnumDef { name: n, entries: ents },
};
// Removed TopLevelSimpleInst after unification

// Data types (subset)
DataType: DataType = {
    "bit" "unsigned" => DataType::Bit { unsigned: true },
    "bit" => DataType::Bit { unsigned: false },
    "longint" "unsigned" => DataType::LongInt { unsigned: true },
    "longint" => DataType::LongInt { unsigned: false },
    "string" => DataType::String,
    "boolean" => DataType::Boolean,
    "number" => DataType::Number,
    "ref" => DataType::Ref,
    "accesstype" => DataType::AccessType,
    "addressingtype" => DataType::AddressingType,
    "onreadtype" => DataType::OnReadType,
    "onwritetype" => DataType::OnWriteType,
    <id:Ident> => DataType::User(id),
};

PropertyDataType: DataType = {
    "addrmap" => DataType::User("addrmap".into()),
    "regfile" => DataType::User("regfile".into()),
    "reg" => DataType::User("reg".into()),
    "field" => DataType::User("field".into()),
    "mem" => DataType::User("mem".into()),
    "ref" => DataType::Ref,
    "number" => DataType::Number,
    "bit" "unsigned" => DataType::Bit { unsigned: true },
    "bit" => DataType::Bit { unsigned: false },
    "longint" "unsigned" => DataType::LongInt { unsigned: true },
    "longint" => DataType::LongInt { unsigned: false },
    "string" => DataType::String,
    "boolean" => DataType::Boolean,
    "accesstype" => DataType::AccessType,
    "addressingtype" => DataType::AddressingType,
    "onreadtype" => DataType::OnReadType,
    "onwritetype" => DataType::OnWriteType,
    <id:Ident> => DataType::User(id),
};
ConcatExpr: Expr = { "{" <list:ConcatList?> "}" => Expr::Concat(list.unwrap_or_default()) };
ConcatList: Vec<Expr> = {
    <h:Expr> "," <t:ConcatList> => { let mut v=vec![h]; v.extend(t); v },
    <e:Expr> => vec![e],
};
ReplicateExpr: Expr = { "{" <cnt:Expr> <c:ConcatExpr> "}" => match c { Expr::Concat(v) => Expr::Replicate { count: Box::new(cnt), elems: v }, _ => unreachable!() } };

// Constant expression subset (excludes property references)
pub ConstExpr: Expr = {
    #[precedence(level="0")] ConstPrimary,
    #[precedence(level="0")] "+" <e:ConstExpr> => Expr::Unary { op: UnaryOp::Plus, rhs: Box::new(e) },
    #[precedence(level="0")] "-" <e:ConstExpr> => Expr::Unary { op: UnaryOp::Minus, rhs: Box::new(e) },
    #[precedence(level="0")] "!" <e:ConstExpr> => Expr::Unary { op: UnaryOp::Not, rhs: Box::new(e) },
    #[precedence(level="0")] "~" <e:ConstExpr> => Expr::Unary { op: UnaryOp::BitNot, rhs: Box::new(e) },
    #[precedence(level="0")] "~&" <e:ConstExpr> => Expr::Reduct { op: ReductOp::And, rhs: Box::new(e) },
    #[precedence(level="0")] "~|" <e:ConstExpr> => Expr::Reduct { op: ReductOp::Or, rhs: Box::new(e) },
    #[precedence(level="0")] "~^" <e:ConstExpr> => Expr::Reduct { op: ReductOp::Xor, rhs: Box::new(e) },
    #[precedence(level="0")] "^~" <e:ConstExpr> => Expr::Reduct { op: ReductOp::Xor, rhs: Box::new(e) },
    #[precedence(level="1")] #[assoc(side="right")] <l:ConstExpr> "**" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Pow, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="2")] #[assoc(side="left")] <l:ConstExpr> "*" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Mul, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="2")] #[assoc(side="left")] <l:ConstExpr> "/" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Div, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="2")] #[assoc(side="left")] <l:ConstExpr> "%" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Mod, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="3")] #[assoc(side="left")] <l:ConstExpr> "+" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Add, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="3")] #[assoc(side="left")] <l:ConstExpr> "-" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Sub, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")] <l:ConstExpr> "<<" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Shl, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")] <l:ConstExpr> ">>" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Shr, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="5")] #[assoc(side="left")] <l:ConstExpr> "<" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Lt, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="5")] #[assoc(side="left")] <l:ConstExpr> "<=" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Le, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="5")] #[assoc(side="left")] <l:ConstExpr> ">" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Gt, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="5")] #[assoc(side="left")] <l:ConstExpr> ">=" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Ge, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="6")] #[assoc(side="left")] <l:ConstExpr> "==" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Eq, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="6")] #[assoc(side="left")] <l:ConstExpr> "!=" <r:ConstExpr> => Expr::Binary { op: BinaryOp::Ne, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="7")] #[assoc(side="left")] <l:ConstExpr> "&" <r:ConstExpr> => Expr::Binary { op: BinaryOp::BitAnd, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="8")] #[assoc(side="left")] <l:ConstExpr> "^" <r:ConstExpr> => Expr::Binary { op: BinaryOp::BitXor, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="8")] #[assoc(side="left")] <l:ConstExpr> "~^" <r:ConstExpr> => Expr::Binary { op: BinaryOp::BitXnor, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="8")] #[assoc(side="left")] <l:ConstExpr> "^~" <r:ConstExpr> => Expr::Binary { op: BinaryOp::BitXnor, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="9")] #[assoc(side="left")] <l:ConstExpr> "|" <r:ConstExpr> => Expr::Binary { op: BinaryOp::BitOr, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="10")] #[assoc(side="left")] <l:ConstExpr> "&&" <r:ConstExpr> => Expr::Binary { op: BinaryOp::LogAnd, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="11")] #[assoc(side="left")] <l:ConstExpr> "||" <r:ConstExpr> => Expr::Binary { op: BinaryOp::LogOr, lhs: Box::new(l), rhs: Box::new(r) },
    #[precedence(level="12")] #[assoc(side="right")] <c:ConstExpr> "?" <t:ConstExpr> ":" <e:ConstExpr> => Expr::Ternary { cond: Box::new(c), then_br: Box::new(t), else_br: Box::new(e) },
};
ConstPrimary: Expr = {
    ConstCastExpr,
    ConstReplicateExpr,
    ConstConcatExpr,
    EnumLit,
    StructLit,
    ArrayLit,
    BoolLit,
    SpecialLit,
    Number,
    String => Expr::Literal(Literal::Str(<>)),
    Ident => Expr::Ident(<>),
    "(" <e:ConstExpr> ")" => e,
};
ConstCastExpr: Expr = {
    "boolean" "'" "(" <e:ConstExpr> ")" => Expr::CastType { ty: CastPrimType::Boolean, expr: Box::new(e) },
    "bit" "'" "(" <e:ConstExpr> ")" => Expr::CastType { ty: CastPrimType::Bit, expr: Box::new(e) },
    "longint" "'" "(" <e:ConstExpr> ")" => Expr::CastType { ty: CastPrimType::LongInt, expr: Box::new(e) },
    <w:ConstCastWidthExpr> "'" "(" <e:ConstExpr> ")" => Expr::CastWidth { width: Box::new(w), expr: Box::new(e) },
};
ConstCastWidthExpr: Expr = { Number, "(" <e:ConstExpr> ")" => e };
ConstConcatExpr: Expr = { "{" <l:ConstConcatList?> "}" => Expr::Concat(l.unwrap_or_default()) };
ConstConcatList: Vec<Expr> = { <h:ConstExpr> "," <t:ConstConcatList> => { let mut v=vec![h]; v.extend(t); v }, <e:ConstExpr> => vec![e] };
ConstReplicateExpr: Expr = { "{" <cnt:ConstExpr> <c:ConstConcatExpr> "}" => match c { Expr::Concat(v) => Expr::Replicate { count: Box::new(cnt), elems: v }, _ => unreachable!() } };
